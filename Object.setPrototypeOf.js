/* Предупреждение: Изменение прототипа [[Prototype]] объекта является, по самой природе 
оптимизации доступа к свойствам в современных движках JavaScript, очень медленной операцией, 
это справедливо для любого браузера и движка JavaScript. Изменение прототипов очень тонко и 
обширно влияет на производительность, причём это влияние не ограничивается просто временем, 
проведённым внутри метода Object.setPrototypeOf(), оно может распространяться на любой код, 
который имеет доступ к любому объекту, чей прототип [[Prototype]] был изменён. 
Если вы заботитесь о производительности, вы никогда не должны изменять прототип [[Prototype]] объекта. 
Вместо этого создайте объект с нужным прототипом [[Prototype]], с помощью метода Object.create().

Сводка
Метод Object.setPrototypeOf() устанавливает прототип 
(то есть, внутреннее свойство [[Prototype]]) указанного объекта в другой объект или null.

Синтаксис
Object.setPrototypeOf(obj, prototype);
Параметры
obj
Объект, которому устанавливается прототип.
prototype
Новый прототип объекта (объект или null).
Описание
Выкидывает исключение TypeError, если объект, чей прототип [[Prototype]] 
является не расширяемым, согласно методу Object.isExtensible(). 
Не делает ничего, если параметр prototype не является объектом или значением null 
(то есть, является числом, строкой, логическим значением или undefined). 
В противном случае метод устанавливает прототип [[Prototype]] объекта obj в новое значение.

Примеры */
var dict = Object.setPrototypeOf({}, null);